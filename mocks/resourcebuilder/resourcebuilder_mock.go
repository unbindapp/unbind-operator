// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks_resource_builder

import (
	context "context"

	corev1 "k8s.io/api/core/v1"

	logr "github.com/go-logr/logr"

	mock "github.com/stretchr/testify/mock"

	networkingv1 "k8s.io/api/networking/v1"

	runtime "k8s.io/apimachinery/pkg/runtime"

	v1 "k8s.io/api/apps/v1"
)

// ResourceBuilderMock is an autogenerated mock type for the ResourceBuilderInterface type
type ResourceBuilderMock struct {
	mock.Mock
}

type ResourceBuilderMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceBuilderMock) EXPECT() *ResourceBuilderMock_Expecter {
	return &ResourceBuilderMock_Expecter{mock: &_m.Mock}
}

// BuildDatabaseObjects provides a mock function with given fields: ctx, logger
func (_m *ResourceBuilderMock) BuildDatabaseObjects(ctx context.Context, logger logr.Logger) ([]runtime.Object, error) {
	ret := _m.Called(ctx, logger)

	if len(ret) == 0 {
		panic("no return value specified for BuildDatabaseObjects")
	}

	var r0 []runtime.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, logr.Logger) ([]runtime.Object, error)); ok {
		return rf(ctx, logger)
	}
	if rf, ok := ret.Get(0).(func(context.Context, logr.Logger) []runtime.Object); ok {
		r0 = rf(ctx, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]runtime.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, logr.Logger) error); ok {
		r1 = rf(ctx, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceBuilderMock_BuildDatabaseObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildDatabaseObjects'
type ResourceBuilderMock_BuildDatabaseObjects_Call struct {
	*mock.Call
}

// BuildDatabaseObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - logger logr.Logger
func (_e *ResourceBuilderMock_Expecter) BuildDatabaseObjects(ctx interface{}, logger interface{}) *ResourceBuilderMock_BuildDatabaseObjects_Call {
	return &ResourceBuilderMock_BuildDatabaseObjects_Call{Call: _e.mock.On("BuildDatabaseObjects", ctx, logger)}
}

func (_c *ResourceBuilderMock_BuildDatabaseObjects_Call) Run(run func(ctx context.Context, logger logr.Logger)) *ResourceBuilderMock_BuildDatabaseObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(logr.Logger))
	})
	return _c
}

func (_c *ResourceBuilderMock_BuildDatabaseObjects_Call) Return(_a0 []runtime.Object, _a1 error) *ResourceBuilderMock_BuildDatabaseObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceBuilderMock_BuildDatabaseObjects_Call) RunAndReturn(run func(context.Context, logr.Logger) ([]runtime.Object, error)) *ResourceBuilderMock_BuildDatabaseObjects_Call {
	_c.Call.Return(run)
	return _c
}

// BuildDeployment provides a mock function with no fields
func (_m *ResourceBuilderMock) BuildDeployment() (*v1.Deployment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BuildDeployment")
	}

	var r0 *v1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func() (*v1.Deployment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *v1.Deployment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceBuilderMock_BuildDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildDeployment'
type ResourceBuilderMock_BuildDeployment_Call struct {
	*mock.Call
}

// BuildDeployment is a helper method to define mock.On call
func (_e *ResourceBuilderMock_Expecter) BuildDeployment() *ResourceBuilderMock_BuildDeployment_Call {
	return &ResourceBuilderMock_BuildDeployment_Call{Call: _e.mock.On("BuildDeployment")}
}

func (_c *ResourceBuilderMock_BuildDeployment_Call) Run(run func()) *ResourceBuilderMock_BuildDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ResourceBuilderMock_BuildDeployment_Call) Return(_a0 *v1.Deployment, _a1 error) *ResourceBuilderMock_BuildDeployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceBuilderMock_BuildDeployment_Call) RunAndReturn(run func() (*v1.Deployment, error)) *ResourceBuilderMock_BuildDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// BuildIngress provides a mock function with no fields
func (_m *ResourceBuilderMock) BuildIngress() (*networkingv1.Ingress, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BuildIngress")
	}

	var r0 *networkingv1.Ingress
	var r1 error
	if rf, ok := ret.Get(0).(func() (*networkingv1.Ingress, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *networkingv1.Ingress); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkingv1.Ingress)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceBuilderMock_BuildIngress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildIngress'
type ResourceBuilderMock_BuildIngress_Call struct {
	*mock.Call
}

// BuildIngress is a helper method to define mock.On call
func (_e *ResourceBuilderMock_Expecter) BuildIngress() *ResourceBuilderMock_BuildIngress_Call {
	return &ResourceBuilderMock_BuildIngress_Call{Call: _e.mock.On("BuildIngress")}
}

func (_c *ResourceBuilderMock_BuildIngress_Call) Run(run func()) *ResourceBuilderMock_BuildIngress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ResourceBuilderMock_BuildIngress_Call) Return(_a0 *networkingv1.Ingress, _a1 error) *ResourceBuilderMock_BuildIngress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceBuilderMock_BuildIngress_Call) RunAndReturn(run func() (*networkingv1.Ingress, error)) *ResourceBuilderMock_BuildIngress_Call {
	_c.Call.Return(run)
	return _c
}

// BuildService provides a mock function with no fields
func (_m *ResourceBuilderMock) BuildService() (*corev1.Service, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BuildService")
	}

	var r0 *corev1.Service
	var r1 error
	if rf, ok := ret.Get(0).(func() (*corev1.Service, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *corev1.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Service)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceBuilderMock_BuildService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildService'
type ResourceBuilderMock_BuildService_Call struct {
	*mock.Call
}

// BuildService is a helper method to define mock.On call
func (_e *ResourceBuilderMock_Expecter) BuildService() *ResourceBuilderMock_BuildService_Call {
	return &ResourceBuilderMock_BuildService_Call{Call: _e.mock.On("BuildService")}
}

func (_c *ResourceBuilderMock_BuildService_Call) Run(run func()) *ResourceBuilderMock_BuildService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ResourceBuilderMock_BuildService_Call) Return(_a0 *corev1.Service, _a1 error) *ResourceBuilderMock_BuildService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceBuilderMock_BuildService_Call) RunAndReturn(run func() (*corev1.Service, error)) *ResourceBuilderMock_BuildService_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceBuilderMock creates a new instance of ResourceBuilderMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceBuilderMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceBuilderMock {
	mock := &ResourceBuilderMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
